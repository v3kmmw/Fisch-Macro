
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path
import asyncio
import subprocess
import httpx
import webbrowser
# from tkinter import *
# Explicit imports to satisfy Flake8
import tkinter as tk
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, messagebox
import customtkinter as ctk
import json
import threading

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\thefu\Downloads\projects\fish\build\assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = ctk.CTk()

def show_confirm_dialog():
    # Create a simple tkinter window for the prompt
    root = tk.Tk()
    root.withdraw()  # Hide the root window, only show the dialog
    result = messagebox.askyesno("Join Server", "Do you have 'Roblox URL Launcher' installed? if not click 'No'.")
    root.destroy()  # Destroy the root window after the prompt
    return result
import winreg

def get_default_browser():
    try:
        registry_key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, r"Software\Microsoft\Windows\Shell\Associations\UrlAssociations\http\UserChoice")
        browser, _ = winreg.QueryValueEx(registry_key, "ProgId")
        if browser:
            if "chrome" in browser.lower():
                return "chrome"
            elif "firefox" in browser.lower():
                return "firefox"
            elif "edge" in browser.lower():
                return "edge"
            elif "floorp" in browser.lower():
                return "floorp"
            else:
                return browser
        return "Unknown"
    except FileNotFoundError:
        return "Unknown"



async def join_server():
    # Perform the asynchronous task of fetching servers
    async with httpx.AsyncClient() as client:
        response = await client.get("https://games.roblox.com/v1/games/16732694052/servers/Public?sortOrder=Asc&excludeFullGames=false&limit=100")
        servers = sorted(response.json()["data"], key=lambda x: x["ping"])
        lowest_ping_server = servers[0]
        print(f"Lowest ping server: {lowest_ping_server['id']}, ping: {lowest_ping_server['ping']}")
        
        # Show confirmation prompt before opening the browser
        with open("config.json", "r") as f:
            config = json.load(f)
        if config['Extension'] == False:
            user_response = show_confirm_dialog()
            with open("config.json", "r") as f:
                config = json.load(f)
                config['Extension'] = user_response
                with open("config.json", "w") as f:
                    json.dump(config, f)
        else:
            user_response = True
        if user_response:
            webbrowser.open(f"https://www.roblox.com/home?placeId=16732694052&gameId={lowest_ping_server['id']}")
        else:
            browser = get_default_browser()
            if browser == "chrome" or browser == "edge":
                webbrowser.open("https://chromewebstore.google.com/detail/roblox-url-launcher/lcefjaknjehbafdeacjbjnfpfldjdlcc")
            else:
                webbrowser.open("https://addons.mozilla.org/en-US/firefox/addon/roblox-url-launcher")



window.iconbitmap(str(relative_to_assets("icon.ico")))
window.title("Fischer")
window.geometry("600x400")
window.configure(bg = "#000000")
canvas = Canvas(
    window,
    bg = "#000000",
    height = 400,
    width = 600,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    301.0,
    200.0,
    image=image_image_1
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))

def open_exe():
    # Path to the executable you want to open
    exe_path = r'macro\macro.exe'
    
    try:
        # Open the EXE using subprocess
        subprocess.run([exe_path])
    except Exception as e:
        print(f"Error: {e}")

def open_exe_in_thread():
    # Create a new thread to run the open_exe function
    thread = threading.Thread(target=open_exe)
    thread.start()

button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    activebackground="#000000",
    highlightthickness=0,
    command=lambda: open_exe_in_thread(),
)
button_1.place(
    x=11.0,
    y=142.0,
    width=185.0,
    height=45.0
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
def on_button_2_click():
    loop = asyncio.get_event_loop()
    loop.run_until_complete(join_server())


button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    activebackground="#000000",
    command=lambda: on_button_2_click(),
    relief="groove"
)
button_2.place(
    x=11.0,
    y=71.0,
    width=185.0,
    height=45.0
)

canvas.create_text(
    11.0,
    0.0,
    anchor="nw",
    text="Fischer",
    fill="#999999",
    font=("Unispace", 40 * -1)
)

canvas.create_rectangle(
    -3.0,
    51.0,
    603.0,
    54.0,
    fill="#1C386D",
    outline="")

canvas.create_rectangle(
    210.0,
    117.0,
    588.0,
    120.0,
    fill="#1C386D",
    outline="")

canvas.create_text(
    222.0,
    66.0,
    anchor="nw",
    text="Stats - WIP",
    fill="#999999",
    font=("Unispace", 40 * -1)
)
window.resizable(False, False)
window.mainloop()