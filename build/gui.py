
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

from pathlib import Path
import asyncio
import subprocess
import httpx
import webbrowser
import urllib.request
# from tkinter import *
# Explicit imports to satisfy Flake8
import tkinter as tk
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage, messagebox
import customtkinter as ctk
import json
import threading
import os
OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\thefu\Downloads\projects\fish\B2\build\assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

DEFAULT_MINIGAME_SETTINGS = '''
Author=Jakobiis

BarSideRatio=0.75
DeadZoneRatio=0.1
MinLeftSideWait=700
MinRightSideWait=700

RightMultiplier=2.7
RightDivision=1.2
LeftMultiplier=2.7
LeftDivision=1.2

RightAnkleBreakMultiplier=1.25
LeftAnkleBreakMultiplier=0.75

ScanDelay=2
'''
DEFAULT_GENERAL_SETTINGS = '''
NavigationKey=\
AutoLowerGraphics=1
AutoZoomIn=1
AutoLookDown=1
AutoCameraMode=0
AutoBlur=1

CameraWhiteTolerance=0
CameraLeft=769
CameraRight=1123
CameraTop=934
CameraBottom=961

ShakeMode=Click
ShakeWhiteTolerance=0
ShakeLeft=483
ShakeRight=1598
ShakeTop=23
ShakeBottom=885

FishBlueTolerance=0
FishBarWhiteColorTolerance=15
ArrowTolerance=0
BarLeft=565
BarRight=1357
BarTop=866
BarBottom=909

HoldRodCastDuration=1000
WaitForBobberDelay=1000
EndMinigameDelay=1500
'''

if not os.path.exists("MinigameSettings.txt"):
    with open("MinigameSettings.txt", "w") as f:
        f.write(DEFAULT_MINIGAME_SETTINGS)

if not os.path.exists("GeneralSettings.txt"):
    with open("GeneralSettings.txt", "w") as f:
        f.write(DEFAULT_GENERAL_SETTINGS)

folder_path = "macro"

# Check if the folder exists
if not os.path.exists(folder_path):
    # If the folder does not exist, create it
    os.makedirs(folder_path)
    print(f"Created folder: {folder_path}")

if not os.path.exists("config.json"):
    config = {"Extension": False, "AHK": False}
    with open("config.json", "w") as f:
        json.dump(config, f)

# Path to the macro executable
macro_url = "https://raw.githubusercontent.com/v3kmmw/Fischer/refs/heads/main/macro/macro.exe"
macro_file_path = os.path.join(folder_path, "macro.exe")

# Download the file if it doesn't already exist
if not os.path.exists(macro_file_path):
    print(f"Downloading macro from {macro_url}...")
    urllib.request.urlretrieve(macro_url, macro_file_path)
    print(f"Downloaded macro to {macro_file_path}")
else:
    print(f"Macro already exists at {macro_file_path}")


window = ctk.CTk()

window.geometry("600x400")
window.configure(bg = "#000000")
window.iconbitmap(str(relative_to_assets("icon.ico")))
window.title("Fischer")


canvas = Canvas(
    window,
    bg = "#000000",
    height = 400,
    width = 600,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    301.0,
    200.0,
    image=image_image_1
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
def open_exe():
    # Path to the executable you want to open
    exe_path = r'macro\macro.exe'
    
    try:
        # Open the EXE using subprocess
        subprocess.run([exe_path])
    except Exception as e:
        print(f"Error: {e}")

def open_exe_in_thread():
    # Create a new thread to run the open_exe function
    result = show_confirm_dialog_2()
    if result:
        thread = threading.Thread(target=open_exe)
        thread.start()
    else:
        webbrowser.open("https://www.autohotkey.com/download/ahk-v2.exe")

def show_confirm_dialog_2():
    # Create a simple tkinter window for the prompt
    root = tk.Tk()
    root.withdraw()  # Hide the root window, only show the dialog
    with open("config.json", "r") as f:
        config = json.load(f)
        if config["AHK"] == True:
            result = True
        else:
            result = messagebox.askyesno("AutoFisch", "Do you have 'AutoHotKey' installed? if not click 'No'.")
    with open("config.json", "r") as f:
        config = json.load(f)
        config["AHK"] = result
        with open("config.json", "w") as f:
            json.dump(config, f)
    root.destroy()  # Destroy the root window after the prompt
    return result
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    activebackground="#000000",
    highlightthickness=0,
    command=lambda: open_exe_in_thread(),
    relief="flat"
)
button_1.place(
    x=11.0,
    y=133.0,
    width=185.0,
    height=45.0
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    activebackground="#000000",
    highlightthickness=0,
    command=lambda: print("button_2 clicked"),
    relief="flat"
)
button_2.place(
    x=11.0,
    y=195.0,
    width=185.0,
    height=45.0
)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    activebackground="#000000",
    highlightthickness=0,
    command=lambda: webbrowser.open("https://github.com/v3kmmw/Fischer"),
    relief="flat"
)
button_3.place(
    x=407.0,
    y=352.0,
    width=185.0,
    height=45.0
)

button_image_4 = PhotoImage(
    file=relative_to_assets("button_4.png"))
button_4 = Button(
    image=button_image_4,
    activebackground="#000000",
    borderwidth=0,
    highlightthickness=0,
    command=lambda: webbrowser.open("https://discord.com/invite/nrqdP5qZvt"),
    relief="flat"
)
button_4.place(
    x=211.0,
    y=352.0,
    width=185.0,
    height=45.0
)

button_image_5 = PhotoImage(
    file=relative_to_assets("button_5.png"))
button_5 = Button(
    image=button_image_5,
    borderwidth=0,
    highlightthickness=0,
    activebackground="#000000",
    command=lambda: webbrowser.open("https://jakobiis.xyz"),
    relief="flat"
)
button_5.place(
    x=11.0,
    y=352.0,
    width=185.0,
    height=45.0
)

button_image_6 = PhotoImage(
    file=relative_to_assets("button_6.png"))
def show_confirm_dialog():
    # Create a simple tkinter window for the prompt
    root = tk.Tk()
    root.withdraw()  # Hide the root window, only show the dialog
    result = messagebox.askyesno("Join Server", "Do you have 'Roblox URL Launcher' installed? if not click 'No'.")
    root.destroy()  # Destroy the root window after the prompt
    return result
import winreg

def get_default_browser():
    try:
        registry_key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, r"Software\Microsoft\Windows\Shell\Associations\UrlAssociations\http\UserChoice")
        browser, _ = winreg.QueryValueEx(registry_key, "ProgId")
        if browser:
            if "chrome" in browser.lower():
                return "chrome"
            elif "firefox" in browser.lower():
                return "firefox"
            elif "edge" in browser.lower():
                return "edge"
            elif "floorp" in browser.lower():
                return "floorp"
            else:
                return browser
        return "Unknown"
    except FileNotFoundError:
        return "Unknown"
async def join_server():
    # Perform the asynchronous task of fetching servers
    async with httpx.AsyncClient() as client:
        response = await client.get("https://games.roblox.com/v1/games/16732694052/servers/Public?sortOrder=Asc&excludeFullGames=false&limit=100")
        servers = sorted(response.json()["data"], key=lambda x: x["ping"])
        lowest_ping_server = servers[0]
        print(f"Lowest ping server: {lowest_ping_server['id']}, ping: {lowest_ping_server['ping']}")
        
        # Show confirmation prompt before opening the browser
        with open("config.json", "r") as f:
            config = json.load(f)
        if config['Extension'] == False:
            user_response = show_confirm_dialog()
            with open("config.json", "r") as f:
                config = json.load(f)
                config['Extension'] = user_response
                with open("config.json", "w") as f:
                    json.dump(config, f)
        else:
            user_response = True
        if user_response:
            webbrowser.open(f"https://www.roblox.com/home?placeId=16732694052&gameId={lowest_ping_server['id']}")
        else:
            browser = get_default_browser()
            if browser == "chrome" or browser == "edge":
                webbrowser.open("https://chromewebstore.google.com/detail/roblox-url-launcher/lcefjaknjehbafdeacjbjnfpfldjdlcc")
            else:
                webbrowser.open("https://addons.mozilla.org/en-US/firefox/addon/roblox-url-launcher")

def on_button_6_click():
    loop = asyncio.get_event_loop()
    loop.run_until_complete(join_server())
button_6 = Button(
    image=button_image_6,
    borderwidth=0,
    activebackground="#000000",
    highlightthickness=0,
    command=lambda: on_button_6_click(),
    relief="flat"
)
button_6.place(
    x=11.0,
    y=71.0,
    width=185.0,
    height=45.0
)

canvas.create_text(
    11.0,
    0.0,
    anchor="nw",
    text="Fischer",
    fill="#E0E0E0",
    font=("Unispace", 40 * -1)
)

canvas.create_rectangle(
    -3.0,
    51.0,
    603.0,
    54.0,
    fill="#1C386D",
    outline="")

canvas.create_rectangle(
    -3.0,
    346.0,
    603.0,
    349.0,
    fill="#1C386D",
    outline="")

canvas.create_rectangle(
    210.0,
    117.0,
    588.0,
    120.0,
    fill="#1C386D",
    outline="")

canvas.create_rectangle(
    210.0,
    179.0,
    588.0,
    182.0,
    fill="#1C386D",
    outline="")

canvas.create_rectangle(
    210.0,
    241.0,
    588.0,
    244.0,
    fill="#1C386D",
    outline="")

canvas.create_rectangle(
    210.0,
    241.0,
    588.0,
    244.0,
    fill="#1C386D",
    outline="")

canvas.create_text(
    222.0,
    66.0,
    anchor="nw",
    text="Stats",
    fill="#E0E0E0",
    font=("Unispace", 40 * -1)
)

canvas.create_text(
    222.0,
    128.0,
    anchor="nw",
    text="Level:",
    fill="#E0E0E0",
    font=("Unispace", 40 * -1)
)

canvas.create_text(
    380.0,
    128.0,
    anchor="nw",
    text="0 - WIP",
    fill="#E0E0E0",
    font=("Unispace", 40 * -1)
)

canvas.create_text(
    222.0,
    190.0,
    anchor="nw",
    text="C$:",
    fill="#E0E0E0",
    font=("Unispace", 40 * -1)
)

canvas.create_text(
    300.0,
    190.0,
    anchor="nw",
    text="0 - WIP",
    fill="#E0E0E0",
    font=("Unispace", 40 * -1)
)
window.resizable(False, False)
# start an async thread
window.mainloop()
